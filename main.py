import numpy as np
from numdiff_utils import perform_num_diff_and_compare

# This is the main script to invoke in order to perform numerical differentiation 
# for comparison with a fully analytically calculated response tensor

# Your situation/prerequisites:
#
# - You have already calculated a response property (henceforth the "target property") which
#   contains at least one geometrical displacement perturbation and gotten a response tensor file (the "reference data")
# - You want to test the results for this property against a result generated by numerical differentiation of 
#   a property of one lower order of geometrical displacement perturbation (the "test property")
# - You trust that the test property will be calculated correctly: Maybe you tested that property
#   earlier with this same script

# This script does the following:
#
# - Generates a series of LSDalton mol file where each Cartesian coordinate of the system is
#   displaced in positive resp. negative directions according to a displacement length you specify
# - Calculates the test property for each such displaced geometry
# - Uses this data and a simple finite difference formula to generate the values of the target property
# - Compares the results thus generated against the reference data and reports the results of this comparison

# Remarks:
#
# - You cannot use this script to form a comparison if the target property does not contain any geometrical
#   displacement perturbations
# - This script does not register whether or not the test property calculations finished without incident
# - This functionality connected to this script invokes system commands, and you must take care to ensure 
#   that the input parameters you specify or the system commands invoked by the script will not inadvertently
#   harm the system in any way, for example by deleting or moving files or by placing undue load on a system
#   being used as a shared resource. No liability is assumed by the author or authors of this script 
#   for harm resulting from the usage of this script.

# Adapt the parameters below to your specific situation:

# Name of mol file of system 
# Must be a valid LSDalton mol file and must be identical to the mol file which was used to calculate the reference data
# Units of atom coordinates must be bohr
# Cannot be 'MOLECULE.INP' or 'numdiff_geo.mol' as these names are used by routines invoked by this script
fname_mol = 'MOLECULE.mol'

# Name of dal file to calculate the test property
# Must be a valid LSDalton dal file and must fulfill the following criteria to enable a proper comparison:
# - The level of theory must be identical to that used to calculate the reference data
# - The property specified in the **OPENRSP section must be one that is one fewer orders of geometrical
#   differentiation than the target property
fname_dal = 'DALFILE.dal'

# Name of OpenRSP rsp_tensor file with reference results
fname_ref = 'TARGET_PROPERTY.rsp_tensor'

# Full path to the executable to be run to calculate the test property
fname_bin = '/home/this_user/software/lsdalton/build/lsdalton.x'

# Full path to basis set directory
basdir = '/home/this_user/software/lsdalton/basis'

# Number of points to use in stencil: Available choices are 2 and 7 (7 takes three times longer but is more accurate)
stencil_np = 2

# Geometric displacement (in bohr) to be used in numerical differentiation
# Different choices of this displacement may be suitable in different situations: As a rule of thumb, a displacement
# of 0.001 bohr has been seen to perform decently well
d = 0.001

print('Starting numerical differentiation procedure')
print(' ')

# End of parameter section

ref_max, max_diff, ref_tensor, num_tensor, diff_tensor = perform_num_diff_and_compare(fname_mol, fname_dal, fname_ref, fname_bin, basdir, stencil_np, d)

print(' ')
print('Numerical differentiation completed')
print(' ')
print('RESULTS')
print(' ')
print('Maximum absolute value in reference data array:', np.amax(abs(ref_tensor)))
print('Maximum absolute difference between reference and and num diff data:', np.amax(abs(diff_tensor)))
print(' ')
print('Reference tensor:', ref_tensor)
print(' ')
print(ref_tensor)
print(' ')
print(' ')
print('Tensor found by numerical differentiation:')
print(' ')
print(num_tensor)
print(' ')
print(' ')
print('Difference between reference and num. diff. tensors')
print(' ')
print(diff_tensor)
print(' ')
print('End of program')
