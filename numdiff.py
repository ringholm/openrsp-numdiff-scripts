# This file is part of openrsp-numdiff-scripts.
# openrsp-numdiff-scripts is made available under an LGPL license.

import numpy as np
import sys
from numdiff_utils import perform_num_diff_and_compare

# This is the main script to invoke in order to perform numerical differentiation 
# for comparison with a fully analytically calculated response tensor

# How to run:
#
# From the command line, run
#
# python numdiff.py <input_file.py>
#
# where <input_file.py> follows the template of <input_template.py> but is adapted to fit your use case
#

# Your situation/prerequisites:
#
# - You have built or installed LSDalton with OpenRSP
# - You have already calculated a response property (henceforth the "target property") which
#   contains at least one geometrical displacement perturbation and gotten a response tensor file (the "reference data")
# - You want to test the results for this property against a result generated by numerical differentiation of 
#   a property of one lower order of geometrical displacement perturbation (the "test property")
# - You trust that the test property will be calculated correctly: Maybe you tested that property
#   earlier with this same script

# This script does the following:
#
# - Generates a series of LSDalton mol file where each Cartesian coordinate of the system is
#   displaced in positive resp. negative directions according to a displacement length you specify
# - Calculates the test property for each such displaced geometry
# - Uses this data and a finite difference stencil formula to generate the values of the target property
# - Compares the results thus generated against the reference data and reports the results of this comparison

# Remarks/warnings:
#
# - You cannot use this script to form a comparison if the target property does not contain any geometrical
#   displacement perturbations. Support for other forms of "displacement" for numerical differentiation
#   is intended for future development.
# - This software does not register whether or not the test property calculations finished without incident
# - This script and the functionality connected to this script invokes system commands, and you must take care to ensure 
#   that the input parameters you specify and the system commands invoked will not inadvertently
#   harm the system in any way, for example by deleting or moving files or by placing undue load on a system
#   being used as a shared resource. No liability is assumed by the author or authors of this software
#   for harm resulting from the usage of this software.

if (sys.argv[1] is None):

	print('ERROR: Input file argument missing! Usage: python numdiff.py <input_file.py>')

else:

	import sys.argv[1][:-3]

print('Starting numerical differentiation procedure')
print(' ')

# End of parameter section

ref_max, max_diff, ref_tensor, num_tensor, diff_tensor = perform_num_diff_and_compare(fname_mol, fname_dal, fname_ref, fname_bin, basdir, stencil_np, d)

print(' ')
print('Numerical differentiation completed')
print(' ')
print('RESULTS')
print(' ')
print('Maximum absolute value in reference data array:', np.amax(abs(ref_tensor)))
print('Maximum absolute difference between reference and and num diff data:', np.amax(abs(diff_tensor)))
print(' ')
print('Reference tensor:')
print(' ')
print(ref_tensor)
print(' ')
print(' ')
print('Tensor found by numerical differentiation:')
print(' ')
print(num_tensor)
print(' ')
print(' ')
print('Difference between reference and num. diff. tensors')
print(' ')
print(diff_tensor)
print(' ')
print('End of program')
